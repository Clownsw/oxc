[workspace]
resolver = "2"
members  = ["crates/*", "tasks/*"]

[workspace.package]
authors     = ["Boshen <boshenc@gmail.com>", "Oxc contributors"]
description = "Oxc is a JavaScript / TypeScript parser with full Test262 conformance."
edition     = "2021"
homepage    = "https://github.com/Boshen/oxc"
keywords    = ["JavaScript", "TypeScript", "parser"]
license     = "MIT"
repository  = "https://github.com/Boshen/oxc"

# https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#lints
[workspace.lints.clippy]
all = 'warn'
# I want to write the best Rust code so both pedantic and nursery is enabled.
# We should only disable rules globally if they are either false positives, chaotic, or does not make sense.
pedantic = 'warn'
nursery = 'warn'
# ** restriction **
dbg_macro = "warn"
todo = "warn"
unimplemented = "warn"
# I like the explicitness of this rule as it removes confusion around `clone`.
# This increases readability, avoids `clone` mindlessly and heap allocating on accident.
clone_on_ref_ptr = "warn"
# These two are mutually exclusive, I like `mod.rs` files for better fuzzy searches on module entries.
self_named_module_files = "warn" # "-Wclippy::mod_module_files",
empty_drop = "warn"
empty_structs_with_brackets = "warn"
exit = "warn"
filetype_is_file = "warn"
get_unwrap = "warn"
impl_trait_in_params = "warn"
rc_buffer = "warn"
rc_mutex = "warn"
rest_pat_in_fully_bound_structs = "warn"
unnecessary_safety_comment = "warn"
# "-Wclippy::same_name_method", # broke bitflags v2
# "-Wclippy::undocumented_unsafe_blocks" # todo
# ** pedantic **
# This rule is too pedantic, I don't want to force this because naming things are hard.
module_name_repetitions = "allow"
# #[must_use] is creating too much noise for this codebase, it does not add much value execept nagging
# the programmer to add a #[must_use] after clippy has been run.
# Having #[must_use] every where also hinders readability.
must_use_candidate = "allow"
# Generated from the `index_vec` crate.
# this error originates in the macro `$crate::__define_index_type_inner` which comes from the expansion of the macro `define_index_type`
used_underscore_binding =  "allow"
doc_markdown = "allow"
# ** nursery **
  # `const` functions do not make sense for our project because this is not a `const` library.
  # This rule also confuses new comers and forces them to add `const` blindlessly without any reason.
missing_const_for_fn = "allow"
# ** style **
# Having both `new` and `default` for a struct is confusing, just implement the more appropriate one.
new_without_default = "allow"

[workspace.dependencies]
# Release:
# * Edit these versions, commit
# * cargo ws version --amend --no-git-tag --no-git-push
# publish = true
oxc_allocator   = { version = "0.0.6", path = "crates/oxc_allocator" }
oxc_ast         = { version = "0.0.6", path = "crates/oxc_ast" }
oxc_diagnostics = { version = "0.0.6", path = "crates/oxc_diagnostics" }
oxc_parser      = { version = "0.0.6", path = "crates/oxc_parser" }
oxc_formatter   = { version = "0.0.6", path = "crates/oxc_formatter" }
oxc_semantic    = { version = "0.0.6", path = "crates/oxc_semantic" }

# publish = false
oxc_span      = { version = "0.0.0", path = "crates/oxc_span" }
oxc_macros    = { version = "0.0.0", path = "crates/oxc_macros" }
oxc_linter    = { version = "0.0.0", path = "crates/oxc_linter" }
oxc_minifier  = { version = "0.0.0", path = "crates/oxc_minifier" }
oxc_hir       = { version = "0.0.0", path = "crates/oxc_hir" }
oxc_ast_lower = { version = "0.0.0", path = "crates/oxc_ast_lower" }
oxc_syntax    = { version = "0.0.0", path = "crates/oxc_syntax" }
oxc_index     = { version = "0.0.0", path = "crates/oxc_index" }
oxc_semantic2 = { version = "0.0.0", path = "crates/oxc_semantic2" }

oxc_tasks_common = { path = "tasks/common" }

bitflags          = { version = "2.3.1" }
bumpalo           = { version = "3.13.0" }
clap              = { version = "4.3.0" }
compact_str       = { version = "0.7.0" }
convert_case      = { version = "0.6.0" }
criterion         = { version = "0.4.0", default-features = false }
flate2            = { version = "1.0.26" }
glob              = { version = "0.3.1" }
ignore            = { version = "0.4.20" }
indextree         = { version = "4.6.0" }
itertools         = { version = "0.10.5" }
jemallocator      = { version = "0.5.0" }
lazy_static       = { version = "1.4.0" }
miette            = { version = "5.9.0" }
mimalloc          = { version = "0.1.37" }
num-bigint        = { version = "0.4.3" }
num-traits        = { version = "0.2.15" }
num_cpus          = { version = "1.15.0" }
once_cell         = { version = "1.17.2" }
phf               = { version = "0.11" }
pico-args         = { version = "0.5.0" }
proc-macro2       = { version = "1.0.59" }
project-root      = { version = "0.2.2" }
quote             = { version = "1.0.28" }
rayon             = { version = "1.7.0" }
regex             = { version = "1.8.3" }
rustc-hash        = { version = "1.1.0", default-features = false, features = ["std"] }
ryu-js            = { version = "0.2.2" }
serde             = { version = "1.0.163" }
serde_json        = { version = "1.0.96" }
syn               = { version = "1.0.109" }
thiserror         = { version = "1.0.40" }
tokio             = { version = "1" }
unicode-id-start  = { version = "1.1.0" }
ureq              = { version = "2.6.2", default-features = false }
url               = { version = "2.3.1" }
walkdir           = { version = "2.3.3" }
indexmap          = { version = "1.9.3" }
index_vec         = { version = "0.1.3" }
static_assertions = { version = "1.1.0" }
stacker           = { version = "0.1.15" }

[workspace.metadata.workspaces]
allow_branch = "main"

[profile.release.package.oxc_wasm]
opt-level = 'z'

[profile.release]
# Configurations explicitly listed here for clarity.
# Using the best options for performance.
opt-level     = 3
lto           = "fat"
codegen-units = 1
strip         = "symbols"
debug         = false
panic         = "abort"   # Let it crash and force ourselves to write safe Rust.

# Use the `--profile release-debug` flag to show symbols in release mode.
# e.g. `cargo build --profile release-debug`
[profile.release-debug]
inherits = "release"
strip    = false
debug    = true
